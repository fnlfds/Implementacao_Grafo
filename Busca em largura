//Fernando Lima Fernandes RA:2410290

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 15

typedef struct node {
    int vertex;
    struct node* next;
} Node;

Node* createNode(int v) {
    Node* newNode = malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

typedef struct graph {
    int numVertices;
    Node** adjList;
    int* visited;
} Graph;

Graph* createGraph(int vertices) {
    Graph* graph = malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjList = malloc(vertices * sizeof(Node*));
    graph->visited = malloc(vertices * sizeof(int));

    for (int i = 0; i < vertices; i++) {
        graph->adjList[i] = NULL;
        graph->visited[i] = 0;
    }

    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
}

void BFS(Graph* graph, int startVertex) {
    Node* queue[MAX_VERTICES];
    int front = 0;
    int rear = 0;

    graph->visited[startVertex] = 1;
    queue[rear] = graph->adjList[startVertex];
    rear++;

    printf("Visited %d\n", startVertex);

    while (front != rear) {
        Node* currentVertex = queue[front];
        front++;

        Node* temp = currentVertex;

        while (temp) {
            int adjVertex = temp->vertex;

            if (graph->visited[adjVertex] == 0) {
                graph->visited[adjVertex] = 1;
                queue[rear] = graph->adjList[adjVertex];
                rear++;
                printf("Visitou %d\n", adjVertex);
            }
            temp = temp->next;
        }
    }
}

int main() {
    Graph* graph = createGraph(MAX_VERTICES);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 1, 5);
    addEdge(graph, 3, 6);
    addEdge(graph, 3, 7);
    addEdge(graph, 5, 8);
    addEdge(graph, 5, 9);
    addEdge(graph, 7, 10);
    addEdge(graph, 7, 11);
    addEdge(graph, 7, 12);
    addEdge(graph, 9, 13);
    addEdge(graph, 9, 14);

    BFS(graph, 1);

    return 0;
}
