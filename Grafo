//Fernando Lima Fernandes RA:2410290
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 6
#define INF 99999

typedef struct node {
    int vertex;
    int weight;
    struct node* next;
} Node;

Node* createNode(int v, int w) {
    Node* newNode = malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->weight = w;
    newNode->next = NULL;
    return newNode;
}

typedef struct graph {
    int numVertices;
    int** adjMatrix;
    Node** adjList;
} Graph;

Graph* createGraph(int vertices) {
    Graph* graph = malloc(sizeof(Graph));
    graph->numVertices = vertices;

    graph->adjMatrix = malloc(vertices * sizeof(int*));
    for (int i = 1; i < vertices; i++) {
        graph->adjMatrix[i] = malloc(vertices * sizeof(int));
        for (int j = 1; j < vertices; j++)
            graph->adjMatrix[i][j] = 0;
    }

    graph->adjList = malloc(vertices * sizeof(Node*));
    for (int i = 1; i < vertices; i++)
        graph->adjList[i] = NULL;

    return graph;
}

void addEdge(Graph* graph, int src, int dest, int weight) {
    graph->adjMatrix[src][dest] = weight;

    Node* newNode = createNode(dest, weight);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
}

//Algoritmo de Dijkstra para calcular o caminho mais curto
void dijkstra(Graph* graph, int src, int dest) {
    int dist[MAX_VERTICES];
    int sptSet[MAX_VERTICES];

    for (int i = 1; i < MAX_VERTICES; i++) {
        dist[i] = INF;
        sptSet[i] = 0;
    }

    dist[src] = 0;

    for (int count = 1; count < MAX_VERTICES - 1; count++) {
        int min = INF, min_index;

        for (int v = 1; v < MAX_VERTICES; v++)
            if (sptSet[v] == 0 && dist[v] <= min)
                min = dist[v], min_index = v;

        int u = min_index;

        sptSet[u] = 1;

        for (int v = 1; v < MAX_VERTICES; v++)
            if (!sptSet[v] && graph->adjMatrix[u][v] && dist[u] != INF && dist[u] + graph->adjMatrix[u][v] < dist[v]) {
                dist[v] = dist[u] + graph->adjMatrix[u][v];
            }
    }

    printf("A soma dos pesos do caminho do vertice %d ao vertice %d pelo caminho mais curto e: %d\n", src, dest, dist[dest]);
}

void printMatrix(Graph* graph) {
    printf("\nMatriz de adjacencias:\n");
    for (int i = 1; i < graph->numVertices; i++) {
        for (int j = 1; j < graph->numVertices; j++) {
            printf("%d ", graph->adjMatrix[i][j]);
        }
        printf("\n");
    }
}

void printGraph(Graph* graph) {
    for (int v = 1; v < graph->numVertices; v++) {
        Node* temp = graph->adjList[v];
        printf("\n Lista de adjacencia do vertice %d\n cabeca", v);
        while (temp) {
            printf(" -> %d(%d)", temp->vertex, temp->weight);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    //Implementação da matriz e da lista de adjacencia pro grafo passado, sem considerar orientacao
    Graph* graph1 = createGraph(MAX_VERTICES);
    // addEdge(graph, origem, destino, peso);
    addEdge(graph1, 1, 1, 1);
    addEdge(graph1, 1, 3, 1);
    addEdge(graph1, 2, 3, 1);
    addEdge(graph1, 2, 4, 1);
    addEdge(graph1, 2, 5, 1);
    addEdge(graph1, 3, 1, 1);
    addEdge(graph1, 3, 2, 1);
    addEdge(graph1, 3, 4, 1);
    addEdge(graph1, 4, 2, 1);
    addEdge(graph1, 4, 3, 1);
    addEdge(graph1, 4, 5, 1);
    addEdge(graph1, 5, 2, 1);
    addEdge(graph1, 5, 4, 1);
    printMatrix(graph1);
    printGraph(graph1);

    //Grafo definido pelo usuario. Orientacao do grafo definida arbitrariamente e pesos definidos pelo usuario
    Graph* graph2 = createGraph(MAX_VERTICES);
    int peso;

    printf("Digite o peso da aresta do vertice 1 para o vertice 1: ");
    scanf("%d", &peso);
    addEdge(graph2, 1, 1, peso);

    printf("Digite o peso da aresta do vertice 1 para o vertice 3: ");
    scanf("%d", &peso);
    addEdge(graph2, 1, 3, peso);

    printf("Digite o peso da aresta do vertice 2 para o vertice 4: ");
    scanf("%d", &peso);
    addEdge(graph2, 2, 4, peso);

    printf("Digite o peso da aresta do vertice 2 para o vertice 5: ");
    scanf("%d", &peso);
    addEdge(graph2, 2, 5, peso);

    printf("Digite o peso da aresta do vertice 3 para o vertice 2: ");
    scanf("%d", &peso);
    addEdge(graph2, 3, 2, peso);

    printf("Digite o peso da aresta do vertice 3 para o vertice 4: ");
    scanf("%d", &peso);
    addEdge(graph2, 3, 4, peso);

    printf("Digite o peso da aresta do vertice 4 para o vertice 5: ");
    scanf("%d", &peso);
    addEdge(graph2, 4, 5, peso);

    printMatrix(graph2);
    printGraph(graph2);
    dijkstra(graph2, 1, 5);

    return 0;
}
