//Fernando Lima Fernandes RA:2410290
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 10

typedef struct node {
    int vertex;
    struct node* next;
} Node;

Node* createNode(int v) {
    Node* newNode = malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

typedef struct graph {
    int numVertices;
    Node** adjList;
    int* visited;
    int* discoveryOrder;
    int iterationCount;
} Graph;

Graph* createGraph(int vertices) {
    Graph* graph = malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjList = malloc(vertices * sizeof(Node*));
    graph->visited = malloc(vertices * sizeof(int));
    graph->discoveryOrder = malloc(vertices * sizeof(int));
    graph->iterationCount = 0;

    for (int i = 0; i < vertices; i++) {
        graph->adjList[i] = NULL;
        graph->visited[i] = 0;
        graph->discoveryOrder[i] = -1;
    }

    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
}

void DFS(Graph* graph, int vertex) {
    Node* adjList = graph->adjList[vertex];
    Node* temp = adjList;

    graph->visited[vertex] = 1;
    graph->discoveryOrder[vertex] = graph->iterationCount++;
    printf("Visitou %d na iteracao %d\n", vertex, graph->discoveryOrder[vertex]);

    while(temp != NULL) {
        int connectedVertex = temp->vertex;

        if(graph->visited[connectedVertex] == 0) {
            DFS(graph, connectedVertex);
        }
        temp = temp->next;
    }

    graph->iterationCount++;
}

int main() {
    Graph* graph = createGraph(MAX_VERTICES);
    addEdge(graph, 0, 1);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 2, 4);
    addEdge(graph, 2, 9);
    addEdge(graph, 3, 4);
    addEdge(graph, 4, 5);
    addEdge(graph, 4, 6);
    addEdge(graph, 4, 7);
    addEdge(graph, 5, 6);
    addEdge(graph, 7, 8);
    addEdge(graph, 7, 9);

    DFS(graph, 0);

    return 0;
}
